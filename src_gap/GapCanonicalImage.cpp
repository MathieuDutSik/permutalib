#include "Permutation.h"
#include "gmpxx.h"
#include <fstream>

#include "Group.h"

int main(int argc, char *argv[])
{
  try {
    using Tidx = uint16_t;
    //    using Telt = permutalib::DoubleSidedPerm<Tidx>;
    using Telt = permutalib::SingleSidedPerm<Tidx>;
    using Tint = mpz_class;
    if (argc != 3 && argc != 2) {
      std::cerr << "We should have argc = 2\n";
      std::cerr << "GapCanonicalImage [EXMP] [OutFile]\n";
      std::cerr << "with EXMP generated by GenerateCanonicalImage.g\n";
      throw PermutalibException{1};
    }
    std::string InputFile = argv[1];
    std::string OutputFile = "unset";
    if (argc == 3)
      OutputFile = argv[2];
    //
    std::ifstream is(InputFile);
    size_t nbGen;
    int n_i;
    is >> nbGen;
    is >> n_i;
    Tidx n = Tidx(n_i);
    std::vector<Telt> LGen(nbGen);
    for (size_t iGen=0; iGen<nbGen; iGen++) {
      std::vector<Tidx> ePermV(n);
      for (Tidx i=0; i<n; i++) {
        int eVal_i;
	is >> eVal_i;
	Tidx eVal = Tidx(eVal_i);
	ePermV[i] = eVal;
      }
      Telt ePerm(ePermV);
      LGen[iGen] = ePerm;
    }
    std::cerr.setf(std::ios::boolalpha);
    //
    //    permutalib::StabChain<Telt> eG = permutalib::MinimalStabChain<Telt,Tint>(LGen, n);
    permutalib::Group<Telt,Tint> eG = permutalib::Group<Telt,Tint>(LGen, n);
    //    std::cerr << "CPP eG=" << eG << "\n";
    //
    std::cerr << "CPP |eG|=" << eG.size() << "\n";
    //
    permutalib::Face eFace(n);
    for (Tidx i=0; i<n; i++) {
      int eVal;
      is >> eVal;
      eFace[i] = eVal;
    }
    permutalib::Face set_can = eG.CanonicalImage(eFace);
    //
    std::ofstream os(OutputFile);
    os << "return [";
    size_t siz = set_can.count();
    boost::dynamic_bitset<>::size_type aRow = set_can.find_first();
    for (size_t i=0; i<siz; i++) {
      if (i > 0)
        os << ",";
      os << (int(aRow) + 1);
      aRow = set_can.find_next(aRow);
    }
    os << "];\n";
    std::cerr << "CPP Normal completion of the program\n";
  }
  catch (PermutalibException const& e) {
    std::cerr << "Erroneous completion of the program\n";
    exit(e.eVal);
  }
  return 0;
}
