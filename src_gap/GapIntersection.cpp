#include "Permutation.h"
#include "gmpxx.h"
#include <fstream>

#include "Group.h"

int main(int argc, char *argv[]) {
  try {
    using Tidx = uint16_t;
    using Telt = permutalib::SingleSidedPerm<Tidx>;
    using Tint = mpz_class;
    using Tgroup = permutalib::Group<Telt, Tint>;
    if (argc != 3 && argc != 4) {
      std::cerr << "GapIntersection [grp1] [grp2]\n";
      std::cerr << "or\n";
      std::cerr << "GapIntersection [grp1] [grp2] [OutFile]\n";
      std::cerr << "with EXMP generated by GenerateExample.g\n";
      throw PermutalibException{1};
    }
    std::string eFile1 = argv[1];
    std::string eFile2 = argv[2];
    //
    auto ReadGroup=[&](std::string const& eFile) -> Tgroup {
      std::ifstream is(eFile);
      size_t nbGen;
      int n_i;
      is >> nbGen;
      is >> n_i;
      Tidx n = Tidx(n_i);
      std::vector<Telt> LGen(nbGen);
      auto read_elt = [&]() -> Telt {
        std::vector<Tidx> ePermV(n);
        for (Tidx i = 0; i < n; i++) {
          int eVal_i;
          is >> eVal_i;
          ePermV[i] = Tidx(eVal_i);
        }
        return Telt(std::move(ePermV));
      };
      for (size_t iGen = 0; iGen < nbGen; iGen++)
        LGen[iGen] = read_elt();
      //
      Telt id(n);
      Tgroup eG(LGen, id);
      return eG;
    };
    Tgroup G1 = ReadGroup(eFile1);
    Tgroup G2 = ReadGroup(eFile2);
    //
    Tgroup eInt = G1.Intersection(G2);
    //
    if (argc == 4) {
      std::string OutputFile = argv[3];
      std::ofstream os(OutputFile);
      os << "return " + eInt.GapString() + ";\n";
    } else {
      std::cerr << "CPP |eG2|=" << eInt.size() << "\n";
      std::cerr << "return " + eInt.GapString() + ";\n";
    }
    std::cerr << "CPP Normal completion of the program\n";
  } catch (PermutalibException const &e) {
    std::cerr << "Erroneous completion of the program\n";
    exit(e.eVal);
  }
  return 0;
}
