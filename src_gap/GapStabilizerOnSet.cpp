#include "Permutation.h"
#include "gmpxx.h"
#include <fstream>

#include "Group.h"

int main(int argc, char *argv[])
{
  try {
    using Telt = permutalib::DoubleSidedPerm;
    using Tint = mpz_class;
    if (argc != 3) {
      std::cerr << "We should have argc = 2\n";
      std::cerr << "GapStabilizerOnSet [EXMP] [OutFile]\n";
      std::cerr << "with EXMP generated by GenerateExample.g\n";
      throw PermutalibException{1};
    }
    std::string InputFile = argv[1];
    std::string OutputFile = argv[2];
    //
    std::ifstream is(InputFile);
    int nbGen, n;
    is >> nbGen;
    is >> n;
    std::vector<Telt> LGen(nbGen);
    for (int iGen=0; iGen<nbGen; iGen++) {
      std::vector<int> ePermV(n);
      for (int i=0; i<n; i++) {
	int eVal;
	is >> eVal;
	ePermV[i]=eVal;
      }
      Telt ePerm(ePermV);
      LGen[iGen] = ePerm;
    }
    std::cerr.setf(std::ios::boolalpha);
    //
    std::cerr << "CPP Before call to MinimalStabChain\n";
    //    permutalib::StabChain<Telt> eG = permutalib::MinimalStabChain<Telt,Tint>(LGen, n);
    permutalib::Group<Telt,Tint> eG = permutalib::Group<Telt,Tint>(LGen, n);
    std::cerr << "CPP After call to MinimalStabChain\n";
    //
    std::cerr << "CPP |eG|=" << eG.size() << "\n";
    //
    Face eFace(n);
    for (int i=0; i<n; i++) {
      int eVal;
      is >> eVal;
      eFace[i] = eVal;
    }
    permutalib::Group<Telt,Tint> eG2 = eG.Stabilizer_OnSets(eFace);
    std::cerr << "CPP |eG2|=" << eG2.size() << "\n";
    std::cerr << "CPP Normal completion of the program\n";
    //
    std::ofstream os(OutputFile);
    os << "local ListGen;\n";
    std::vector<Telt> LGenRet = eG2.GeneratorsOfGroup();
    os << "ListGen:=" << GapStringTVector(LGenRet) << ";\n";
    if (LGenRet.size() == 0)
      os << "return Group(());\n";
    else
      os << "return Group(ListGen);\n";
  }
  catch (PermutalibException const& e) {
    std::cerr << "Erroneous completion of the program\n";
    exit(e.eVal);
  }
  return 0;
}
