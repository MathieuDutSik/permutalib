// Copyright (C) 2022 Mathieu Dutour Sikiric <mathieu.dutour@gmail.com>
#include "Permutation.h"
#include "gmpxx.h"
#include <fstream>

#include "Group.h"

int main(int argc, char *argv[]) {
  try {
    using Tidx = uint16_t;
    //    using Telt = permutalib::DoubleSidedPerm<Tidx>;
    using Telt = permutalib::SingleSidedPerm<Tidx>;
    using Tint = mpz_class;
    using Tgroup = permutalib::Group<Telt, Tint>;
    if (argc != 2 && argc != 3) {
      std::cerr << "We should have argc = 2\n";
      std::cerr << "GapCanonicalImage [EXMP] [OutFile]\n";
      std::cerr << "with EXMP generated by GenerateCanonicalImage.g\n";
      throw permutalib::PermutalibException{1};
    }
    std::string InputFile = argv[1];
    //
    std::ifstream is(InputFile);
    Tgroup eG = permutalib::ReadGroupFromStream<Tgroup>(is);
    std::cerr.setf(std::ios::boolalpha);
    std::cerr << "CPP |eG|=" << eG.size() << "\n";
    //
    std::string s;
    is >> s;
    permutalib::Face eFace = permutalib::ConvertStringToFace(s);
    permutalib::Face set_can = eG.CanonicalImage(eFace);
    //
    auto prt = [&](std::ostream &os) -> void {
      os << "return [";
      size_t siz = set_can.count();
      boost::dynamic_bitset<>::size_type aRow = set_can.find_first();
      for (size_t i = 0; i < siz; i++) {
        if (i > 0)
          os << ",";
        os << (static_cast<int>(aRow) + 1);
        aRow = set_can.find_next(aRow);
      }
      os << "];\n";
    };
    if (argc == 3) {
      std::string OutputFile = argv[2];
      std::ofstream os(OutputFile);
      prt(os);
    } else {
      prt(std::cerr);
    }
    std::cerr << "CPP Normal completion of the program\n";
  } catch (permutalib::PermutalibException const &e) {
    std::cerr << "Erroneous completion of the program\n";
    exit(e.eVal);
  }
  return 0;
}
