// Copyright (C) 2022 Mathieu Dutour Sikiric <mathieu.dutour@gmail.com>
#include "Permutation.h"
#include "gmpxx.h"
#include <fstream>

#include "Group.h"

int main(int argc, char *argv[]) {
  try {
    using Tidx = uint32_t;
    using Telt = permutalib::SingleSidedPerm<Tidx>;
    using Tint = mpz_class;
    using Tgroup = permutalib::Group<Telt, Tint>;
    if (argc != 2 && argc != 3) {
      std::cerr << "GroupProperties [EXMP]\n";
      std::cerr << "or\n";
      std::cerr << "GroupProperties [EXMP] [OutFile]\n";
      std::cerr << "with EXMP generated by GenerateExample.g\n";
      throw permutalib::PermutalibException{1};
    }
    std::string InputFile = argv[1];
    //
    std::ifstream is(InputFile);
    Tgroup eG = permutalib::ReadGroupFromStream<Tgroup>(is);
    Tint order = eG.size();
    bool IsPrimitive = eG.IsPrimitive();
    bool IsTransitive = eG.IsTransitive();
    bool IsCommutative = eG.IsCommutative();
    bool IsCyclic = eG.IsCyclic();
    //
    auto prt = [&](std::ostream &os) -> void {
      auto fct = [&](const bool &val) -> std::string {
        if (val)
          return "true";
        return "false";
      };
      os << "return rec(order:=" << order
         << ", IsPrimitive:=" << fct(IsPrimitive)
         << ", IsTransitive:=" << fct(IsTransitive)
         << ", IsCommutative:=" << fct(IsCommutative)
         << ", IsCyclic:=" << fct(IsCyclic) << ");\n";
    };

    if (argc == 3) {
      std::string OutputFile = argv[2];
      std::ofstream os(OutputFile);
      prt(os);
    } else {
      prt(std::cerr);
    }
  } catch (permutalib::PermutalibException const &e) {
    std::cerr << "Erroneous completion of the program\n";
    exit(e.eVal);
  }
  return 0;
}
